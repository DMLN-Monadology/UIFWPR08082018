/* Global Language Direction ('ltr', 'rtl' or 'both')
-----------------------------------------------------*/
$global-text-direction: ltr !default;

// BREAKPOINT VARIABLES
/* -----------------------------------------
 * Target Sizes or Devices or Both
 * Sizes: Small, Medium, Large, xlarge, xxlarge
 * Devices: Phone, Phablet, Tablet, Desktop
----------------------------------------- */
$breakpoints: (
  'small': rem-calc(0),
  'medium': rem-calc(900),
  'large': rem-calc(1025),
  'xlarge': rem-calc(1440),
  'xxlarge': rem-calc(1920),
) !default;

$devices: (
  'phone': rem-calc(0),
  'phablet': rem-calc(640),
  'tablet': rem-calc(960),
  'desktop': rem-calc(1200),
) !default;

/*-----MINIMUM-----*/

// Devices Min
$phone-min:  map-get($devices, 'phone') !default;
$phablet-min: map-get($devices, 'phablet') !default;
$tablet-min:  map-get($devices, 'tablet') !default;
$desktop-min: map-get($devices, 'desktop') !default;

// Breakpoints Min
$small-min: map-get($breakpoints, 'small') !default;
$medium-min: map-get($breakpoints, 'medium') !default;
$large-min: map-get($breakpoints, 'large') !default;
$xlarge-min: map-get($breakpoints, 'xlarge') !default;
$xxlarge-min: map-get($breakpoints, 'xxlarge') !default;

/*-----MAXIMUM-----*/

// Devices Max
$phone-max:   ($phablet-min - 1) !default;
$phablet-max: ($tablet-min - 1) !default;
$tablet-max:  ($desktop-min - 1) !default;
$desktop-max: rem-calc(1439);

// Breakpoints Max
$small-max: ($medium-min - 1) !default;
$medium-max: ($large-min - 1) !default;
$medium-portrait-max: 1000px !default;
$large-max: ($xlarge-min - 1) !default;
$xlarge-max: ($xxlarge-min - 1) !default;

/*-----RANGES-----*/

// Breakpoints
$small:     "only screen and (max-width: #{$small-max})";
$medium:    "only screen and (min-width: #{$medium-min}) and (max-width: #{$medium-max})";
$large:     "only screen and (min-width: #{$large-min}) and (max-width: #{$large-max})";
$xlarge:    "only screen and (min-width: #{$xlarge-min}) and (max-width: #{$xlarge-max})";
$xxlarge:   "only screen and (min-width: #{$xxlarge-min})";
$medium-portrait: "only screen and (min-width: #{$medium-min}) and (max-width: #{$medium-portrait-max})";

// Devices
$phone:     "only screen and (max-width: #{$phone-max})";
$phablet:   "only screen and (min-width: #{$phablet-min}) and (max-width: #{$phablet-max})";
$tablet:    "only screen and (min-width: #{$tablet-min}) and (max-width: #{$tablet-max})";
$desktop:   "only screen and (min-width: #{$desktop-min})";

/*-----ONLY-----*/

// Breakpoints Only
$small-only:  "all and (min-width: 0) and (max-width: #{$small-max})";// @include breakpoint( small only)
$medium-only:  "all and (min-width: #{$medium-min}) and (max-width: #{$medium-max})";
$large-only:  "all and (min-width: #{$large-min}) and (max-width: #{$large-max})";
$xlarge-only:  "all and (min-width: #{$xlarge-min}) and (max-width: #{$xlarge-max})";

// Devices Only
$phone-only:  "all and (min-width: 0) and (max-width: #{$phone-max})";// @include breakpoint( phone only)
$phablet-only:  "all and (min-width: #{$phablet-min}) and (max-width: #{$phablet-max})";
$tablet-only:  "all and (min-width: #{$tablet-min}) and (max-width: #{$tablet-max})";
$desktop-only:  "all and (min-width: #{$desktop-min}) and (max-width: #{$desktop-max})";

/*-----AND UP-----*/

// Breakpoints Up
$medium-up:   "only screen and (min-width: #{$medium-min})";
$large-up:    "only screen and (min-width: #{$large-min})";
$xlarge-up:   "only screen and (min-width: #{$xlarge-min})";

// Devices Up
$phone-up: "all and (min-width: 0)"; // @include breakpoint( phone )
$phablet-up: "all and (min-width: #{$phablet-min})";
$tablet-up: "all and (min-width: #{$tablet-min})";
$desktop-up: "all and (min-width: #{$desktop-min})";

/*-----AND DOWN-----*/

// Breakpoints Down
$medium-down: "only screen and (max-width: #{$medium-max})";
$large-down:  "only screen and (max-width: #{$large-max})";
$xlarge-down: "only screen and (max-width: #{$xlarge-max})";

// Devices Down
$phablet-down: "all and (max-width: #{$phone-max})"; // @include breakpoint( phablet down) or @include breakpoint( phone only)
$tablet-down: "all and (max-width: #{$phablet-max})";
$desktop-down:  "all and (max-width: #{$tablet-max})";

/*-----COMBOS-----*/

// Devices
$desk-tab: "all and (min-width: #{$tablet-min}) and (max-width: #{$desktop-max})"; // tablet and desktop
$tab-phab: "all and (min-width: #{$phablet-min}) and (max-width: #{$tablet-max})"; // phablet and tablet
$phab-phone: "all and (min-width: 0) and (max-width: #{$phablet-max})"; // phone and phablet

/*-----ONLY PRINT-----*/
$print:  "only print";


// MATERIAL SHADOW
/* -----------------------------------------
/* Material Box Shadow
/* Derived From Google Material Design
/* ---------------------------------------- */

// ForInternal Use -  Customization Purposes
$shadow-key-umbra-opacity:      0.18 !default;
$shadow-key-penumbra-opacity:   0.14 !default;
$shadow-ambient-shadow-opacity: 0.12 !default;

// Shadow Depth Levels
$shadow-1dp: 0px 1px 3px 0px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 1px 1px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 2px 1px -1px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-2dp: 0px 1px 5px 0px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 2px 2px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 3px 1px -2px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-3dp: 0px 1px 8px 0px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 3px 4px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 3px 3px -2px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-4dp: 0px 2px 4px -1px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 4px 5px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 1px 10px 0px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-5dp: 0px 3px 5px -1px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 5px 8px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 1px 14px 0px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-6dp: 0px 3px 5px -1px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 6px 10px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 1px 18px 0px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-7dp: 0px 4px 5px -2px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 7px 10px 1px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 2px 16px 1px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-8dp: 0px 5px 5px -3px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 8px 10px 1px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 3px 14px 2px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-9dp: 0px 5px 6px -3px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 9px 12px 1px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 3px 16px 2px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-10dp: 0px 6px 6px -3px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 10px 14px 1px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 4px 18px 3px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-11dp: 0px 6px 7px -4px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 11px 15px 1px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 4px 20px 3px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-12dp: 0px 7px 8px -4px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 12px 17px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 5px 22px 4px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-13dp: 0px 7px 8px -4px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 13px 19px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 5px 24px 4px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-14dp: 0px 7px 9px -4px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 14px 21px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 5px 26px 4px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-15dp: 0px 8px 9px -5px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 15px 22px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 6px 28px 5px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-16dp: 0px 8px 10px -5px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 16px 24px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 6px 30px 5px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-17dp: 0px 8px 11px -5px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 17px 26px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 6px 32px 5px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-18dp: 0px 9px 11px -5px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 18px 28px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 7px 34px 6px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-19dp: 0px 9px 12px -6px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 19px 29px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 7px 36px 6px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-20dp: 0px 10px 13px -6px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 20px 31px 3px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 8px 38px 7px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-21dp: 0px 10px 13px -6px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 21px 33px 3px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 8px 40px 7px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-22dp: 0px 10px 14px -6px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 22px 35px 3px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 8px 42px 7px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-23dp: 0px 11px 14px -7px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 23px 36px 3px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 9px 44px 8px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-24dp: 0px 11px 15px -7px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 24px 38px 3px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 9px 46px 8px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;

// Button Tag Selector
$button-tag-selector: true;

// TO DO - COMPONENT SETTINGS
/* ------------------------------ */

/* TO DO: z-index Map */
$zindex-app: 1;
$modal-z-index: 2147483647;

/* TO DO: OTHER */
$placeholder-text-color: palettes(type, subtext) !default; // Input Placeholder Text
$global-margin: 1rem !default; // Layout

// SASS EXPORTS
// Purpose: Change any value in this map from "true" to "false" to disable that component's CSS class output.
// You'll still be able to use the component's mixins, but none of our pre-written classes will be in your CSS.
/* ------------------------------ */
$isc-components: (
  404error: true,
  global: true,
  breadcrumbs: true,
  buttons: true,
  colors: true,
  footer: true,
  isc-forms: true,
  icons: true,
  iconbar: true,
  layout: true,
  mixins: true,
  modals: true,
  pagination: true,
  primarynav: true,
  secondarynav: true,
  sidebar: true,
  tables: true,
  timeline: true,
  tooltip: true,
  typeahead: true,
  typography: true,
  utilities: true,
  widgets: true,
) !default;

$isc-components: () !default;
$modules: () !default;

/// Checks if a module is in use.
@function using($name) {
  // Import from global scope
  $isc-components: $isc-components !global;
  $module-key: map-get($isc-components, $name);

  @if $module-key == true or $module-key == null {
    @return true;
  }
  @else {
    @return false;
  }
}

/// Checks if a module's CSS has already been exported.
@function imported($name) {
  // Import from global scope
  $modules: $modules !global;
  // Check if the module is already on the imported list
  @if type-of(index($modules, $name)) == 'number' {
    @return true;
  }
  @else {
    @return false;
  }
}

/// Outputs the chunk of content passed if component $name hasn't yet been output.
/// This prevents code duplication by keeping track of which components have already been output.
///
/// @param {string} $name - Name of component to output
///
/// @output The content passed, if the component has not yet been exported.
@mixin exports($name) {
  // Check if the module has already been imported
  @if not(imported($name)) {
    // Check if the module should be used
    @if using($name) {
      $modules: append($modules, $name) !global;
      @content;
    }
  }
}
