// BREAKPOINT VARIABLES
/* -----------------------------------------
 * Target Sizes or Devices or Both
 * Sizes: Small, Medium, Large, xlarge, xxlarge
 * Devices: Phone, Phablet, Tablet, Desktop
----------------------------------------- */
$breakpoints: (
  'small': rem-calc(0),
  'medium': rem-calc(859),
  'large': rem-calc(1025),
  'xlarge': rem-calc(1440),
  'xxlarge': rem-calc(1920),
) !default;

$devices: (
  'phone': rem-calc(320),
  'phablet': rem-calc(414),
  'tablet': rem-calc(768),
  'desktop': rem-calc(1025),
) !default;

/* MINIMUM */

// Devices
$screen-phone-min:  map-get($devices, 'phone') !default;
$screen-phablet-min: map-get($devices, 'phablet') !default;
$screen-tablet-min:  map-get($devices, 'tablet') !default;
$screen-desktop-min: map-get($devices, 'desktop') !default;

// Breakpoints
$small-min: map-get($breakpoints, 'small') !default;
$medium-min: map-get($breakpoints, 'medium') !default;
$large-min: map-get($breakpoints, 'large') !default;
$xlarge-min: map-get($breakpoints, 'xlarge') !default;
$xxlarge-min: map-get($breakpoints, 'xxlarge') !default;

/* MAXIMUM */

// Devices
$screen-phone-max:   ($screen-phablet-min - 1) !default;
$screen-phablet-max: ($screen-tablet-min - 1) !default;
$screen-tablet-max:  ($screen-desktop-min - 1) !default;

// Breakpoints
$small-max: ($medium-min - 1) !default;
$medium-max: ($large-min - 1) !default;
$medium-portrait-max: 1000px !default;
$large-max: ($xlarge-min - 1) !default;
$xlarge-max: ($xxlarge-min - 1) !default;

$phone:     "only screen and (max-width: #{$screen-phone-max})";
$phablet:   "only screen and (min-width: #{$screen-phablet-min}) and (max-width: #{$screen-phablet-max})";
$tablet:    "only screen and (min-width: #{$screen-tablet-min}) and (max-width: #{$screen-tablet-max})";
$desktop:   "only screen and (min-width: #{$screen-desktop-min})";

$small:     "only screen and (max-width: #{$small-max})";
$medium:    "only screen and (min-width: #{$medium-min}) and (max-width: #{$medium-max})";
$large:     "only screen and (min-width: #{$large-min}) and (max-width: #{$large-max})";
$xlarge:    "only screen and (min-width: #{$xlarge-min}) and (max-width: #{$xlarge-max})";
$xxlarge:   "only screen and (min-width: #{$xxlarge-min})";
$medium-portrait: "only screen and (min-width: #{$medium-min}) and (max-width: #{$medium-portrait-max})";

// Medium Down
$medium-down: "only screen and (max-width: #{$medium-max})";
// Medium Up
$medium-up:   "only screen and (min-width: #{$medium-min})";
// Large Down
$large-down:  "only screen and (max-width: #{$large-max})";
// Large Up
$large-up:    "only screen and (min-width: #{$large-min})";
// Xlarge Down
$xlarge-down: "only screen and (max-width: #{$xlarge-max})";
// Xlarge Up
$xlarge-up:   "only screen and (min-width: #{$xlarge-min})";

// Tablet Up
$tab-plus:     "only screen and (min-width: #{$screen-tablet-min})";
// Phablet Up
$phab-plus:    "only screen and (min-width: #{$screen-phablet-min})";
// Tablet and phablet only
$tab-phab:     "only screen and (min-width: #{$screen-phablet-min}) and (max-width: #{$screen-tablet-max})";
// Tablet Down
$tab-or-less:  "only screen and (max-width: #{$screen-tablet-max})";
// Phablet Down
$phab-or-less: "only screen and (max-width: #{$screen-phablet-max})";
// Phone Down
$below-phab:   "only screen and (max-width: #{$screen-phone-max})";
// Everything but Desktop
$mobile:       "only screen and (max-width: #{$medium-max})";
//Print
$print:  "only print";

// THEME COLOR PALETTES
/* -----------------------------------------
* Primary Color
* Neutral Color
* Accent Color
* States (Alert, Success, Warning, Info)
* Typography Colors
----------------------------------------- */

/* Primary Pallete */
$primary-color: #485163 !default;
$secondary-color: #a7b8d1 !default;
$neutral-color: #ebebeb !default;
$accent-color: #35b2ea !default;

/* Neutral Shades */
$neutral-two: #f1f1f1 !default;
$neutral-three: #f8f8f8 !default;
$neutral-splash: #eef1f6 !default;
/* Neutral Pallete */
$neutral-one: #ebebeb !default;
$neutral-two: #f1f1f1 !default;
$neutral-three: #f8f8f8 !default;
$neutral-splash: #eef1f6 !default;

/* Typography Pallete */
$dark-text: #424242 !default;
$light-text: #ffffff !default;
$header-text: #546075 !default;
$subtext-color: #b0bbc1 !default;

/* States Pallete */
$success-color: #64B5AA !default;
$alert-color: #db492c !default;
$warning-color: #FB9B5F !default;
$info-color: #B1D5E5 !default;

$dark-color: $dark-text !default;

$theme-colors: (
  success: $success-color,
  warning: $warning-color,
  alert: $alert-color,
  dark: $dark-text,
  info: $info-color,
  primary: #485163,
  primary-two: #8598b6,
  secondary: #a7b8d1,
  primary-four: #cfd7e6,
  accent: #35b2ea,
  neutral: #ebebeb,
  neutral-two: #f1f1f1,
  neutral-three: #f8f8f8,
  neutral-splash: #eef1f6,
  dark-text: $dark-text,
  light-text: $light-text,
  header-text: $header-text,
  dark-color: $dark-text,
  subtext: #b0bbc1
) !default;

/* --- Grayscale Logic --- */
$gray-10: darken( #fff, 10 );
$gray-20: darken( #fff, 20 );
$gray-30: darken( #fff, 30 );
$gray-40: darken( #fff, 40 );
$gray-50: darken( #fff, 50 );
$gray-60: darken( #fff, 60 );
$gray-70: darken( #fff, 70 );
$gray-80: darken( #fff, 80 );
$gray-90: darken( #fff, 90 );


// MATERIAL SHADOW
/* -----------------------------------------
/* Material Box Shadow
/* Derived From Google Material Design
/* ---------------------------------------- */

// ForInternal Use -  Customization Purposes
$shadow-key-umbra-opacity:      0.18 !default;
$shadow-key-penumbra-opacity:   0.14 !default;
$shadow-ambient-shadow-opacity: 0.12 !default;

// Shadow Depth Levels
$shadow-1dp: 0px 1px 3px 0px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 1px 1px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 2px 1px -1px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-2dp: 0px 1px 5px 0px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 2px 2px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 3px 1px -2px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-3dp: 0px 1px 8px 0px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 3px 4px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 3px 3px -2px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-4dp: 0px 2px 4px -1px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 4px 5px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 1px 10px 0px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-5dp: 0px 3px 5px -1px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 5px 8px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 1px 14px 0px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-6dp: 0px 3px 5px -1px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 6px 10px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 1px 18px 0px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-7dp: 0px 4px 5px -2px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 7px 10px 1px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 2px 16px 1px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-8dp: 0px 5px 5px -3px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 8px 10px 1px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 3px 14px 2px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-9dp: 0px 5px 6px -3px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 9px 12px 1px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 3px 16px 2px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-10dp: 0px 6px 6px -3px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 10px 14px 1px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 4px 18px 3px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-11dp: 0px 6px 7px -4px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 11px 15px 1px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 4px 20px 3px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-12dp: 0px 7px 8px -4px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 12px 17px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 5px 22px 4px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-13dp: 0px 7px 8px -4px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 13px 19px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 5px 24px 4px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-14dp: 0px 7px 9px -4px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 14px 21px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 5px 26px 4px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-15dp: 0px 8px 9px -5px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 15px 22px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 6px 28px 5px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-16dp: 0px 8px 10px -5px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 16px 24px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 6px 30px 5px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-17dp: 0px 8px 11px -5px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 17px 26px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 6px 32px 5px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-18dp: 0px 9px 11px -5px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 18px 28px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 7px 34px 6px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-19dp: 0px 9px 12px -6px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 19px 29px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 7px 36px 6px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-20dp: 0px 10px 13px -6px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 20px 31px 3px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 8px 38px 7px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-21dp: 0px 10px 13px -6px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 21px 33px 3px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 8px 40px 7px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-22dp: 0px 10px 14px -6px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 22px 35px 3px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 8px 42px 7px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-23dp: 0px 11px 14px -7px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 23px 36px 3px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 9px 44px 8px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;
$shadow-24dp: 0px 11px 15px -7px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 24px 38px 3px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 9px 46px 8px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;

// Shodow-Depth Map
$shadow-depths: (
  '1dp': $shadow-1dp,
  '2dp': $shadow-2dp,
  '3dp': $shadow-3dp,
  '4dp': $shadow-4dp,
  '5dp': $shadow-5dp,
  '6dp': $shadow-6dp,
  '7dp': $shadow-7dp,
  '8dp': $shadow-8dp,
  '9dp': $shadow-9dp,
  '10dp': $shadow-10dp,
  '11dp': $shadow-11dp,
  '12dp': $shadow-12dp,
  '13dp': $shadow-13dp,
  '14dp': $shadow-14dp,
  '15dp': $shadow-15dp,
  '16dp': $shadow-16dp,
  '17dp': $shadow-17dp,
  '18dp': $shadow-18dp,
  '19dp': $shadow-19dp,
  '20dp': $shadow-20dp,
  '21dp': $shadow-21dp,
  '22dp': $shadow-22dp,
  '23dp': $shadow-23dp,
  '24dp': $shadow-24dp
) !default;

// Structure CSS Class Rules
@each $depth, $shadow-depth in $shadow-depths {
  .shadow-#{$depth} {
    box-shadow: $shadow-depth;
  }
}

// Shadow Mixin
@mixin shadow($shadow-depth) {
  $shadow-depth: map-get($shadow-depths, $shadow-depth);
  box-shadow: $shadow-depth;
}


// TO DO - MOTION UI
/* ------------------------------ */

// Classes to use when triggering in/out animations
$motion-class: (
  in: "ng-enter",
  out: "ng-leave",
) !default;

$motion-class-active: (
  in: "ng-enter-active",
  out: "ng-leave-active",
) !default;

$motion-class-stagger: (
  in: "ng-enter-stagger",
  out: "ng-leave-stagger",
) !default;

$motion-class-showhide: (
  in: "ng-hide-remove",
  out: "ng-hide-add",
) !default;

$motion-class-showhide-active: (
  in: "ng-hide-remove-active",
  out: "ng-hide-add-active",
) !default;

// Set if movement-based transitions should also fade the element in and out
$motion-slide-and-fade: false !default;
$motion-hinge-and-fade: true !default;
$motion-scale-and-fade: true !default;
$motion-spin-and-fade: true !default;

// Default speed for transitions and animations
$motion-duration-default: 500ms !default;

// Slow and fast modifiders
$motion-duration-slow: 750ms !default;
$motion-duration-fast: 250ms !default;
$motion-stagger-duration-default: 150ms !default;
$motion-stagger-duration-short: 50ms !default;
$motion-stagger-duration-long: 300ms !default;

// Default timing function for transitions and animations
$motion-timing-default: ease !default;

// Built-in and custom easing functions
// Every item in this map becomes a CSS class
$motion-timings: (
  linear: linear,
  ease: ease,
  easeIn: ease-in,
  easeOut: ease-out,
  easeInOut: ease-in-out,
  bounceIn: cubic-bezier(0.485, 0.155, 0.240, 1.245),
  bounceOut: cubic-bezier(0.485, 0.155, 0.515, 0.845),
  bounceInOut: cubic-bezier(0.760, -0.245, 0.240, 1.245),
) !default;

// Default delay for all transitions and animations
$motion-delay-default: 0 !default;

//Short and long delay modifiers
$motion-delay-short: 300ms !default;
$motion-delay-long: 700ms !default;


// TO DO - COMPONENT SETTINGS
/* ------------------------------ */

/* TO DO: z-index Map */
$zindex-app: 1;
$modal-z-index: 2147483647;

/* TO DO: OTHER */
$placeholder-text-color: palettes(type, subtext) !default; // Input Placeholder Text
$global-margin: 1rem !default; // Layout
