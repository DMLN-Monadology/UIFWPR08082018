/*
  ICONS
  ----------

  Includes basic icon styles and mixins. Framework uses Font Awesome Icon Library
   - Basic Icons: position, icon, color, margin
   - SVG Icons
   - Icons as Buttons
   - Icons lists and Icon Controls (e.g. Add/Remove/Edit a table record)
*/

/* Icons Controls Map */
$icon-controls: (
  delete: "\f00d",
  add: "\f067",
  settings: "\f013",
  view: "\f06e",
  edit: "\f040",
  search: "\f002",
  email: "\f0e0",
  hamburger: "\f0c9",
  home: "\f015",
  save: "\f0c7",
  cancel: "\f05e",
  arrowback: "\f060",
  arrownext: "\f061",
  arrowup: "\f062",
  arrowdown: "\f063",
  checkmark: "\f00c",
  minus: "\f068",
  sortable: "\f0dc",
  filter: "\f0b0",
  heart: "\f004"
) !default;

/* ICON SETTINGS */
$default-icon-color: $body-font-color !default;
$default-svg-icon-size: 1.25rem !default;

/* FONT ICONS */

// For adding font icons to elements via CSS pseudo-elements
// http://jaydenseric.com/blog/fun-with-sass-and-font-icons
@mixin icon($position: before, $icon: false, $color: inherit, $margin: 0.3125rem, $styles: true) {
  @if $position == both {
      $position: 'before, &:after';
  }
  // Either a :before or :after pseudo-element, or both, defaulting to :before
  &:#{$position} {
    @if $icon {

      content: "#{map-get($icon-controls, $icon)}";
    }
    @if $color {

      color: $color;
    }
    @if $margin {

      @if $position == before {
          margin-right: $margin;
      }
      @if $position == after {
          margin-left: $margin;
      }
      @if $position == both {
          margin-left: $margin;
          margin-right: $margin;
      }
    }
    @if $styles {
        // Supportive icon styles required
        speak: none;
        font-style: normal;
        font-weight: normal;
        font-family: 'FontAwesome';
    }

    @content;
  }
}

// Directional Arrow Mixin */
/* ------------------------------------
 * Specifically for use with rtl and ltr directions
 * Arrow output will be determined by $global-text-direction setting
------------------------------------------------------------------------*/

@mixin directional-arrow($direction: next, $position: after, $icon: false, $color: inherit, $margin: 0.3125rem, $styles: true) {
  $direction: $direction;
  $position: $position;
  $icon: $icon;
  $color: $color;
  $margin: $margin;
  $styles: $styles;

  @if $direction == next {
    $position: default-dir('after', 'before');
    $icon: default-dir('\f061', '\f060');
  }
  @if $direction == back {
    $position: default-dir('before', 'after');
    $icon: default-dir('\f060', '\f061');
  }

  // Either :before or :after pseudo-element depending on $global-text-direction
  &:#{$position} {
    @if $icon {
      content: "#{$icon}";
    }

    @if $color {color: $color;}

    @if $margin {
      $margin: $margin;

      @if $position == before {
          margin-#{$global-right}: $margin;
      }
      @if $position == after {
          margin-#{$global-left}: $margin;
      }
    }
    @if $styles {
        speak: none;
        font-style: normal;
        font-weight: normal;
        font-family: 'FontAwesome';
    }

    @content; // Include any extra rules supplied

    @if $direction == next {
      @if $position == after {
        margin-#{$global-left}: $margin;
      }
      @else if $position == after {
        margin-left: $margin;
      }
    }

    @if $direction == back {
      @if $position == before {
        margin-#{$global-right}: $margin;
      }
      @else if $position == after {
        margin-left: $margin;
      }
    }
  }
}

/* SVG ICONS */
@mixin svg-icon($fill: $default-icon-color, $height: $default-svg-icon-size, $width: $default-svg-icon-size) {
  $fill: $fill;
  $height: $height;
  $width: $width;

  svg {
    color: $fill;
    fill: $fill;
    height: $height;
    width: $width;
    background: transparent;
    border: none;
    vertical-align: middle;
    line-height: 1;
  }

  @each $color in map-keys($theme-colors) {
    &.#{$color} {
      $color-name: map-get($theme-colors, $color);

      svg {
        color: $color-name;
        fill: $color-name;
        vertical-align: middle;
        line-height: 1;

        &:hover, &:focus {
          fill: scale-color($color-name, $lightness: 25%);
        }
      }
    }
  }

  @content;
}

/* ICON LISTS */
@mixin icon-list($color: $default-icon-color, $size: $paragraph-font-size, $align: left, $icon-padding: 0, $icon-spacing: 1rem, $margin: 0 0 1rem 0) {
  $color: $color;
  $size: $size;
  $margin: $margin;
  $align: $align;
  $icon-padding: $icon-padding;
  $icon-spacing: $icon-spacing;

  background: transparent;
  list-style-type: none;
  overflow: visible;
  list-style: none;
  text-align: $align;
  margin: $margin;

  > li {
    display: inline-block;
    list-style: none;
    text-align: $align;
    font-size: $size;
    padding: 0;
    line-height: 1;
    margin: 0 $icon-spacing 0 0;

    > * {display: block;}

    a {
      color: $anchor-font-color;

      @each $color in map-keys($theme-colors) {
        &.#{$color} {

          $color-name: map-get($theme-colors, $color);
          color: $color-name;

          &:hover, &:focus {
            color: scale-color($color-name, $lightness: 25%);
          }
        }
      }

      &:hover, &:focus {
        color: scale-color($anchor-font-color, $lightness: 25%);
      }
    }

    &:#{$global-last}-child {
      margin-#{$global-right}: 0;
    }

    @include bidirectional() {
      &:first-child {
        margin-left: 0;
      }
    }

  }
}

/* ICON CONTROLS */
@mixin icon-controls($color: $default-icon-color, $align: center, $size: inherit, $icon-spacing: 0.125rem, $icon-padding: 0, $margin: 0 auto) {
  $color: $color;
  $size: $size;
  $icon-spacing: $icon-spacing;
  $margin: $margin;
  $align: $align;
  $icon-padding: $icon-padding;
  $icon-spacing: $icon-spacing;

  background: transparent;
  list-style-type: none;
  overflow: hidden;
  list-style: none;
  line-height: 1;
  display: inline-block;
  font-size: $size;
  text-align: $align;
  margin: $margin;

  > li {
    display: inline-block;
    vertical-align: middle;
    line-height: 1;
    list-style: none;
    text-align: $align;
    color: $color;
    font-size: $size;
    text-align: $align;
    margin: 0 $icon-spacing 0 0;

    > * {display: block;}

    svg {
      fill: $color;
    }

    a {
      padding: $icon-padding;
      text-align: $align;
      color: $anchor-font-color;
      text-align: $align;
      vertical-align: middle;
      line-height: 1;

      &:hover, &:focus {
        color: scale-color($color, $lightness: 25%);
      }
    }

    &:#{$global-last}-child {
      margin-#{$global-right}: 0;
    }

    @include bidirectional() {
      &:first-child {
        margin-left: 0;
      }
    }
  }
}

/* ICON EXPORTS */
@include exports(icons) {
  .icon {
    @include icon;

    @each $name, $icon in $icon-controls {
      &.#{$name}:before {
        content: quote($icon);
      }
    }

    @each $color in map-keys($theme-colors) {
      &.#{$color} {

        $color-name: map-get($theme-colors, $color);
        @include icon($color: $color-name);
      }
    }

    // Example Usage
    &[href^="mailto"] {
      @include icon(before, email) {
      }
    }
  }

  .arrow-next {

    @if $global-text-direction == both {
      .ltr & {
        @include directional-arrow(next);
      }

      .rtl & {
        @include directional-arrow(back, arrowback);
      }
    }
    @else {
      @include directional-arrow(next);
    }
  }

  .arrow-back {

    @if $global-text-direction == both {
      .ltr & {
        @include directional-arrow(back);
      }

      .rtl & {
        @include directional-arrow(next, arrownext);
      }
    }
    @else {
      @include directional-arrow(back);
    }
  }

  .svg-icon {
    @include svg-icon;
  }

  /* BUTTONS AS ICONS */
  button, a.button, input[type="submit"], input[type="button"] {

    &.icon {

      :not(.arrow-next), :not(.arrow-back) {
        padding: 0;
      }
      background: transparent;
      border: none;
      box-shadow: none;
      color: $anchor-font-color;

      @each $color in map-keys($theme-colors) {
        &.#{$color} {

          $color-name: map-get($theme-colors, $color);
          color: $color-name;

          &:hover, &:focus {
            color: scale-color($color-name, $lightness: 25%);
          }
        }
      }

      &.svg-icon {
        @include svg-icon($fill: $anchor-font-color, $height: $default-svg-icon-size, $width: $default-svg-icon-size) {

          @each $color in map-keys($theme-colors) {
            &.#{$color} {

              $color-name: map-get($theme-colors, $color);
              @include svg-icon($fill: $color-name) {
                background: transparent;
              }
            }
          }
        }

      }

      &.arrow-next {
        @if $global-text-direction == both {
          .ltr & {
            @include directional-arrow(next);
          }

          .rtl & {
            @include directional-arrow(back, arrowback);
          }
        }
        @else {
          @include directional-arrow(next);
        }
      }

      &.arrow-back {
        @if $global-text-direction == both {
          .ltr & {
            @include directional-arrow(back);
          }

          .rtl & {
            @include directional-arrow(next, arrownext);
          }
        }
        @else {
          @include directional-arrow(back);
        }
      }

      &:hover, &:focus {background: transparent;}
    }
  }

  .icon-list {
    @include icon-list;

    &.center {
      @include icon-list($align: center);
    }

    &.right {
      @include icon-list($align: right);
    }
  }

  .icon-controls {
    @include icon-controls;
  }

  .fa-li {line-height: $paragraph-line-height;}
}
