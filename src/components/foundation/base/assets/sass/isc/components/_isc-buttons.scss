/*
  BUTTONS
  ----------
  Includes basic style variations for a collection of commonly used button types.
   - Basic Buttons, size & color variations
   - Prefix, Postfix
   - Button Groups
*/

/* Button Settings */
$button-padding: 0.75em 1em !default;
$button-margin: 0 0 1rem 0 !default;
$button-style: solid !default;
$button-background: $accent-color !default;
$button-background-hover: scale-color($button-background, $lightness: -15%) !default;
$button-color: auto !default;
$button-radius: $global-radius !default;
$button-sizes: (
   tiny: 0.7,
   small: 0.8,
   medium: 1,
   large: 1.3,
 ) !default;
$button-font-size: 1rem !default;
$button-opacity-disabled: 0.5 !default;
$button-cancel-background: $gray !default;
$button-tag-selector: true;

/* Style Exports */

/* Support for input[type="submit"] and input[type="button"] */
input[type="submit"], input[type="button"] {
  @extend .button;
}

button, .button, input[type="submit"], input[type="button"] {

  &.dropdown {
    position: relative;
    padding-right: 2rem; // Placeholder

    &::after {
      @include css-triangle(6px, inherit, top);
      position: absolute;
      right: 0.7rem;
      top: 50%;
      margin-top: -3px;
    }
  }

  @each $color in map-keys($theme-colors) {

  &.#{$color} {
    $color-name: map-get($theme-colors, $color);
      @include button-style(
        $background: $color-name,
        $background-hover: scale-color($color-name, $lightness: -15%),
        $color: isitlight($color-name, $body-font-color, $light-text)
      );

      &.dropdown {

        &::after {
          @include css-triangle(6px, isitlight($color-name, $body-font-color, $light-text), top);
          position: absolute;
          right: 0.7rem;
          top: 50%;
          margin-top: -3px;
        }
      }

      &.hollow {
        @include button-style(
          $background-hover: transparent,
          $color: scale-color($color-name, $lightness: -15%)
        );
        background: transparent;
        border-color: scale-color($color-name, $lightness: -15%);

        &:hover, &:focus {
          color: scale-color($color-name, $lightness: -35%);
          border-color: scale-color($color-name, $lightness: -35%);
        }
        &.dropdown {
          &::after {border-top-color: $color-name;}
        }
      }
    }
  }

  &.cancel {
    @include button-style(
      $background: $button-cancel-background,
      $background-hover: auto, // generate dynamically
      $color: isitlight($button-cancel-background, $body-font-color, $light-text),
      $style: solid //solid or hollow
    );

    &.hollow {
      background: transparent;
      color: scale-color($button-cancel-background, $lightness: -25%);
      border-color: scale-color($button-cancel-background, $lightness: -25%);

      &:hover, &:focus {
        color: scale-color($button-cancel-background, $lightness: -40%);
        border-color: scale-color($button-cancel-background, $lightness: -40%);
      }
    }
  }
}

/* Button Utilities  */
button, .button, input[type="submit"], input[type="button"] {

  &:focus {outline: none;} //No outline on Focus

  &.flat {margin: 0;} //Removes margin
}

/* Prefixed/Postfixed Buttons */
button, .button, input[type="submit"], input[type="button"] {

  .prefix &, .postfix & {
    margin: 0;
    padding: 0.5em 0.75em;
    text-align: center;
    border-radius: $global-radius 0 0 $global-radius;
  }

  .prefix & {border-radius: $global-radius 0 0 $global-radius;}
  .postfix & {border-radius: 0 $global-radius $global-radius 0;}

  &.prefix {border-radius: $global-radius 0 0 $global-radius;}
  &.postfix {border-radius: 0 $global-radius $global-radius 0;}
}

/* Button Group */
.button-group {
  @extend %button-group;

  > li {
    flex: 0 0 auto;
    margin: 0;

    > input + label, input[type="checkbox"] + label, input[type="radio"] + label {margin: 0;}

    // Links become buttons
    #{$child-selectors} {
      @extend %button;
      font-size: inherit;
      display: block;
      margin: 0;


      &:last-child {border-radius: 0 $global-radius $global-radius 0; border-right: none;}
    }

    &:not(:last-child) {
      #{$child-selectors} {
        border-right: 1px solid rgba(black, 0.21);
        border-radius: 0;
      }
    }

    &.cancel {

      #{$child-selectors} {
        @include button-style(
        $background: $button-cancel-background,
        $background-hover: auto, // generate dynamically
        $color: isitlight($button-cancel-background, $body-font-color, $light-text),
        $style: solid //solid or hollow
        );
      }
    }

    @each $color in map-keys($theme-colors) {

    &.#{$color} {
      $color-name: map-get($theme-colors, $color);

        #{$child-selectors} {
          @include button-style(
            $background: $color-name,
            $background-hover: scale-color($color-name, $lightness: -15%),
            $color: isitlight($color-name, $body-font-color, $light-text)
          );
        }
      }
    }
  }
}

.button-group {
  @each $color in map-keys($theme-colors) {

  &.#{$color} {
    $color-name: map-get($theme-colors, $color);

      > li {

        #{$child-selectors} {
          @include button-style(
            $background: $color-name,
            $background-hover: scale-color($color-name, $lightness: -15%),
            $color: isitlight($color-name, $body-font-color, $light-text)
          );
        }
      }

      &.segmented {
        border-color: scale-color($color-name, $lightness: -15%);

        > li {
          #{$child-selectors} {
            @include button-style(
              $background-hover: transparent,
              $color: scale-color($color-name, $lightness: -15%)
            );
            background: transparent;
            border-color: scale-color($color-name, $lightness: -15%);

            &:hover, &:focus {
              color: scale-color($color-name, $lightness: -35%);
              border-color: scale-color($color-name, $lightness: -35%);
            }
          }
        }
      }
    }
  }
}
